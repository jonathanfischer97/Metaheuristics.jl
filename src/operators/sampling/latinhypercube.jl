"""
    LatinHypercubeSampling(nsamples, dim; iterations)

Create `N` solutions within a Latin Hypercube sample in bounds with dim.

### Example 

```julia-repl
julia> sample(LatinHypercubeSampling(10,2))
2×10 Matrix{Float64}:
0.0705631  0.7127     0.118018  0.48839   0.342403  0.606461  0.880482  0.206142  0.963978  0.525742
0.795046   0.0443734  0.114347  0.903396  0.470998  0.275709  0.89515   0.321041  0.527518  0.600209

julia> sample(LatinHypercubeSampling(10,2), [-10 -10;10 10.0])
2×10 Matrix{Float64}:
-7.81644  0.505902   3.90738  -2.05837  5.62434  -9.34437   6.43987  -1.3162    9.45114  -4.71696
-2.34461  0.749366  -8.57816   9.803    6.82463   2.72363  -1.74596  -4.50273  -7.13632   5.0381
```
"""
struct LatinHypercubeSampling <: AbstractInitializer
    N::Int
    dim::Int
    iterations::Int
    LatinHypercubeSampling(nsamples, dim;iterations=25) = new(nsamples,dim,iterations)
end

"""
    sample(method, [bounds])

Return a matrix with data by rows generated by using `method` (real representation) in
inclusive interval [0, 1].
Here, `method` can be [`LatinHypercubeSampling`](@ref), [`Grid`](@ref) or [`RandomInBounds`](@ref).

### Example 

```julia-repl
julia> sample(LatinHypercubeSampling(10,2))
2×10 Matrix{Float64}:
0.0705631  0.7127     0.118018  0.48839   0.342403  0.606461  0.880482  0.206142  0.963978  0.525742
0.795046   0.0443734  0.114347  0.903396  0.470998  0.275709  0.89515   0.321041  0.527518  0.600209

julia> sample(LatinHypercubeSampling(10,2), [-10 -10;10 10.0])
2×10 Matrix{Float64}:
-7.81644  0.505902   3.90738  -2.05837  5.62434  -9.34437   6.43987  -1.3162    9.45114  -4.71696
-2.34461  0.749366  -8.57816   9.803    6.82463   2.72363  -1.74596  -4.50273  -7.13632   5.0381
```
"""
function sample(method::LatinHypercubeSampling, bounds = zeros(0,0))
    X = _lhs(method.N, method.dim)
    score = _score_lhs(X)
    # sample improving
    for i in 1:method.iterations
        XX = _lhs(method.N, method.dim)
        sc = _score_lhs(XX)
        sc < score && continue
        X = XX
        score = sc
    end
    isempty(bounds) && (return X)
    _scale_sample(X, bounds)
end

function _lhs(nsamples, dim)
    # initial sample
    X = reshape([v for i in 1:dim for v in shuffle(1.0:nsamples)], dim, nsamples)
    # smooth and normalize sample
    (X .- rand(dim, nsamples)) ./ nsamples
end

_score_lhs(M) = minimum(pairwise_distances(M))
function _scale_sample(X, bounds)
    a = view(bounds, 1,:)'
    b = view(bounds, 2,:)'
    @assert length(a) == size(X,2)
    # scale sample
    a .+ (b - a) .* X
end

